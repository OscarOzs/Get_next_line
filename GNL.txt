
GET NEXT LINE :

A SAVOIR :
read memorise ses appels, ce qui permet de se deplacer sans dereferencer.

FONCTIONS :

- char	*ft_fill_stock :
	- prend en param deux str (buffer et stock), en fonction du contenu de stock, les concatene ou simplement ft_strdup le buffer pour le mettre dans line.
	- va mettre la suite du '\n' dans stock tout en concatenant le precedant avec le buffer du stock --> return la concatenation.
	- ft_memset avant de free

- int	get_next_line :
	- read et put '\0' avant la boucle.
	- boucle while tant qu'on trouve pas '\n'
	- envoi a ft_fill_stock et recuperant le retour dans line
-- sortie de boucle --
if is_end_of_file == true
	agir en consequence --> return (0);
else
	agir en consequence --> return (1);

- int	ft_is_end_of_file :
	- si il y a '\0' et retour de read == 0 : end of file --> free stock --> return (0);
else return (1)

_________________________________

FONCTIONS TIERS :

- ft_strchr

- ft_strjoin

- ft_strlen(surement

- ft_strdup

___________________________________________________________________________________________________

- Malloc :
			- line
			- buffer
			- stock
- Free :
			- buffer
			- stock
___________________________________________________________________________________________________

TRAME :

- Protection ---------------------------------

- faire boucle while principale
	(ne pas oublier le +1 pour '\0')

- ft_is_end_of_file

